/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hk.gui;

import com.hk.objs.Categories;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hoangkien
 */
public class ManageCategory extends javax.swing.JFrame {

    /**
     * Creates new form ManageCategory
     */
    private DefaultTableModel model;
    private ArrayList<Categories> categoryList;

    public ManageCategory() {
        initComponents();
        model = (DefaultTableModel) this.tbCategories.getModel();
        tbCategories.getColumnModel().getColumn(0).setMaxWidth(100);
        categoryList = Categories.getAllCategory();
        Categories item = null;
        for (int i = 0; i < categoryList.size(); i++) {
            item = categoryList.get(i);
            model.addRow(new Object[]{item.getCategoryId(), item.getCategoryName(), item.getDescription()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbCategories = new javax.swing.JTable();
        btnAddCategory = new javax.swing.JButton();
        btnRemoveCategory = new javax.swing.JButton();
        btnEditCategory = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtFilterID = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFilterCatName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtFilterDescription = new javax.swing.JTextField();
        btnClearFilter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manage Category");

        tbCategories.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Category ID", "Category Name", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbCategories);
        if (tbCategories.getColumnModel().getColumnCount() > 0) {
            tbCategories.getColumnModel().getColumn(0).setHeaderValue("Category ID");
            tbCategories.getColumnModel().getColumn(1).setHeaderValue("Category Name");
            tbCategories.getColumnModel().getColumn(2).setHeaderValue("Description");
        }

        btnAddCategory.setText("Add Category");
        btnAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCategoryActionPerformed(evt);
            }
        });

        btnRemoveCategory.setText("Remove Category");
        btnRemoveCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveCategoryActionPerformed(evt);
            }
        });

        btnEditCategory.setText("Edit Category");
        btnEditCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCategoryActionPerformed(evt);
            }
        });

        jLabel1.setText("Filter by Category ID");

        btnFilter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnFilter.setText("Filter");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        jLabel2.setText("By Category Name");

        jLabel3.setText("By Description");

        btnClearFilter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnClearFilter.setText("Clear Filter");
        btnClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFilterDescription)
                            .addComponent(txtFilterID))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEditCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtFilterCatName, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClearFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddCategory)
                    .addComponent(btnRemoveCategory)
                    .addComponent(btnEditCategory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFilterID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtFilterCatName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFilter)
                    .addComponent(jLabel3)
                    .addComponent(txtFilterDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearFilter))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCategoryActionPerformed
        DialogCategory dialog = new DialogCategory(this, rootPaneCheckingEnabled);
        dialog.setTitle("Add Category");
        dialog.setVisible(true);
        if (dialog.isModify()) {
            Categories category = new Categories(dialog.getCategoryName(), dialog.getDescription());
            if (category.save()) {
                model.addRow(new Object[]{category.getCategoryId(),
                    category.getCategoryName(), category.getDescription()});
                this.categoryList.add(category);
            } else {
                JOptionPane.showMessageDialog(null, 
                        "You do not have permission to add a Category");
            }
        }
    }//GEN-LAST:event_btnAddCategoryActionPerformed

    private void btnEditCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCategoryActionPerformed
        if (this.tbCategories.getSelectedRow() != -1) {
            int selectedRow = this.tbCategories.getSelectedRow();
            int categoryId = (int) this.tbCategories.getValueAt(selectedRow, 0);
            String categoryName = (String)tbCategories.getValueAt(selectedRow, 1);
            String description = (String)tbCategories.getValueAt(selectedRow, 2);
            DialogCategory dialog = new DialogCategory(this, rootPaneCheckingEnabled);
            dialog.setCategoryId(categoryId);
            dialog.setCategoryName(categoryName);
            dialog.setDescription(description);
            dialog.setTitle("Edit category");
            dialog.setVisible(true);
            if (dialog.isModify()) {
                categoryName = dialog.getCategoryName();
                description = dialog.getDescription();
                Categories category = new Categories(categoryName, description);
                category.setCategoryId(categoryId);
                if (category.save()) {
                    model.setValueAt(categoryName, selectedRow, 1);
                    model.setValueAt(description, selectedRow, 2);
                    for (Categories item : categoryList) {
                        if (item.getCategoryId() == categoryId) {
                            item.setCategoryName(categoryName);
                            item.setDescription(description);
                            break;
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, 
                            "You do not have permission to edit categories");
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "You must choose one row");
        }
    }//GEN-LAST:event_btnEditCategoryActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        Pattern pattern1 = Pattern.compile("(?i).*"
                + this.txtFilterID.getText() + ".*");
        Pattern pattern2 = Pattern.compile("(?i).*"
                + this.txtFilterCatName.getText() + ".*");
        Pattern pattern3 = Pattern.compile("(?i).*"
                + this.txtFilterDescription.getText() + ".*");
        for (Categories item : this.categoryList) {
            if (pattern1.matcher(String.valueOf(item.getCategoryId())).matches()
                    && pattern2.matcher(item.getCategoryName()).matches()
                    && pattern3.matcher(item.getDescription()).matches()) {
                model.addRow(new Object[]{
                    item.getCategoryId(),
                    item.getCategoryName(),
                    item.getDescription()});
            }
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnRemoveCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveCategoryActionPerformed
        int selectedRow = this.tbCategories.getSelectedRow();
        if (selectedRow != -1) {
            int result = JOptionPane.showConfirmDialog(this, 
                    "Are you sure want to remove "
                    + this.tbCategories.getValueAt(selectedRow, 1));
            if (result == JOptionPane.YES_OPTION) {
                for (int i = 0; i < this.categoryList.size(); i++) {
                    if (categoryList.get(i).getCategoryId() == 
                            (int) this.tbCategories.getValueAt(selectedRow, 0)) {
                        if (categoryList.get(i).remove()) {
                            this.model.removeRow(selectedRow);
                            this.categoryList.remove(i);
                        } else {
                            JOptionPane.showMessageDialog(this, 
                                    "You do not have permission to Remove this category");
                        }
                        break;
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "You must choose a row");
        }
    }//GEN-LAST:event_btnRemoveCategoryActionPerformed

    private void btnClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFilterActionPerformed
        this.txtFilterCatName.setText("");
        this.txtFilterDescription.setText("");
        this.txtFilterID.setText("");
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        for (Categories item : this.categoryList) {
            model.addRow(new Object[]{
                item.getCategoryId(),
                item.getCategoryName(),
                item.getDescription()});
        }
    }//GEN-LAST:event_btnClearFilterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageCategory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageCategory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddCategory;
    private javax.swing.JButton btnClearFilter;
    private javax.swing.JButton btnEditCategory;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnRemoveCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbCategories;
    private javax.swing.JTextField txtFilterCatName;
    private javax.swing.JTextField txtFilterDescription;
    private javax.swing.JTextField txtFilterID;
    // End of variables declaration//GEN-END:variables
}
