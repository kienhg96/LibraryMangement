/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hk.gui;

import com.hk.database.Database;
import com.hk.objs.Books;
import com.hk.objs.BorrowDetails;
import com.hk.objs.Borrows;
import com.hk.objs.Users;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hoangkien
 */
public class ManageReturnBook extends javax.swing.JFrame {

    private DefaultTableModel userTableModel;
    private DefaultTableModel borrowTableModel;
    private DefaultTableModel returnTableModel;
    private ArrayList<Users> listUser;
    private ArrayList<Borrows> listBorrow;
    private DateFormat df = new SimpleDateFormat("dd-MM-yyyy");

    /**
     * Creates new form ManageReturnBook
     */
    public ManageReturnBook() {
        initComponents();
        userTableModel = (DefaultTableModel) tbUser.getModel();
        borrowTableModel = (DefaultTableModel) tbBorrowed.getModel();
        returnTableModel = (DefaultTableModel) tbReturn.getModel();
        listUser = Users.getAllUser();
        for (Users user : listUser) {
            userTableModel.addRow(new Object[]{user.getUsername(), user.getFullname(),
                df.format(user.getBirthday()), user.getAddress(),
                user.getPhone(), df.format(user.getExpirationDate())});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbUser = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFilterUsername = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbReturn = new javax.swing.JTable();
        lbBorrow = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbBorrowed = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnReturn = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        spPenalty = new javax.swing.JSpinner();
        btnOK = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manage Return Books");

        tbUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Fullname", "Birthday", "Address", "Phone Number", "Expiration Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbUser);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Choose User:");

        jLabel2.setText("Filter by username");

        btnFilter.setText("Filter");

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        tbReturn.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Name", "Author", "Borrow Date", "Expiration Date", "Return Date", "Penalty"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbReturn.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jScrollPane2.setViewportView(tbReturn);

        lbBorrow.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbBorrow.setText("Books borrowed by ...:");

        tbBorrowed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Name", "Author", "Category", "Publish Year", "Borrow Date", "Expiration Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbBorrowed.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jScrollPane3.setViewportView(tbBorrowed);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Return book:");

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel4.setText("Penalty");

        btnOK.setText("Update");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jScrollPane3)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilterUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFilter))
                            .addComponent(lbBorrow)
                            .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spPenalty, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnReturn))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(435, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnOK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnExit, btnOK});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFilterUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLoad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbBorrow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReturn)
                    .addComponent(jLabel4)
                    .addComponent(spPenalty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemove)
                    .addComponent(btnOK)
                    .addComponent(btnExit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        borrowTableModel.getDataVector().removeAllElements();
        borrowTableModel.fireTableDataChanged();
        returnTableModel.getDataVector().removeAllElements();
        returnTableModel.fireTableDataChanged();
        
        int selectedRow = tbUser.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "You must choose one user");
        } else {
            String username = (String) tbUser.getValueAt(selectedRow, 0);
            lbBorrow.setText("Books borrowed by "
                    + (String) tbUser.getValueAt(selectedRow, 1) + ":");
            Users user = Database.findUserByUsername(username);
            listBorrow = Borrows.getAllBorrowListByUser(user);
            for (Borrows borrow : listBorrow) {
                for (BorrowDetails detail : borrow.getBorrowDetailList()) {
                    if (detail.getReturnDate() == null) {
                        Books book = detail.getBook();
                        borrowTableModel.addRow(new Object[]{
                            book.getBookId(),
                            book.getBookName(),
                            book.getAuthor(),
                            book.getCategory().getCategoryName(),
                            book.getPublishYear(),
                            df.format(borrow.getBorrowDate()),
                            df.format(detail.getExpirationDate())
                        });
                    }
                }
            }
        }
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        int selectedRow = tbBorrowed.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "You must choose one row on Borrowed table");
        } else {
            int bookId = (int) tbBorrowed.getValueAt(selectedRow, 0);
            int count = returnTableModel.getRowCount();
            boolean flag = true;
            for (int i = 0; i < count; i++) {
                if (bookId == (int) tbReturn.getValueAt(i, 0)) {
                    flag = false;
                    break;
                }

            }
            if (flag) {
                returnTableModel.addRow(new Object[]{
                    bookId,
                    tbBorrowed.getValueAt(selectedRow, 1),
                    tbBorrowed.getValueAt(selectedRow, 2),
                    tbBorrowed.getValueAt(selectedRow, 5),
                    tbBorrowed.getValueAt(selectedRow, 6),
                    df.format(Database.localDateToDate(LocalDate.now())),
                    spPenalty.getValue()
                });
                spPenalty.setValue(0);
            } else {
                JOptionPane.showMessageDialog(this, "Book already added");
            }

        }
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int selectedRow = tbReturn.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "You must choose one row in the Return Table");
        } else {
            returnTableModel.removeRow(selectedRow);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        int ret = JOptionPane.showConfirmDialog(this, "Are you sure want to save it?");
        if (ret == JOptionPane.YES_OPTION) {
            int rowCount = returnTableModel.getRowCount();
            int borrowCount = borrowTableModel.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                int bookId = (int) this.tbReturn.getValueAt(i, 0);
                for (int j = 0; j < borrowCount; j++) {
                    if (((int) this.tbBorrowed.getValueAt(j, 0)) == bookId) {
                        borrowTableModel.removeRow(j);
                        break;
                    }
                }
                for (Borrows borrow : listBorrow) {
                    boolean found = false;
                    for (BorrowDetails detail : borrow.getBorrowDetailList()) {
                        if (detail.getBook().getBookId() == bookId) {
                            detail.setPenalty((int) this.tbReturn.getValueAt(i, 6));
                            try {
                                detail.setReturnDate(df.parse((String) this.tbReturn.getValueAt(i, 5)));
                            } catch (ParseException ex) {
                                Logger.getLogger(ManageReturnBook.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            if (!detail.save(borrow)){
                                JOptionPane.showMessageDialog(this, "Error occur, see log for more infomation");
                            } 
                            found = true;
                            break;
                        }
                    }
                    if (found) {
                        break;
                    }
                }
            }
            returnTableModel.getDataVector().removeAllElements();
            returnTableModel.fireTableDataChanged();
        }
    }//GEN-LAST:event_btnOKActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageReturnBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageReturnBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnOK;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReturn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbBorrow;
    private javax.swing.JSpinner spPenalty;
    private javax.swing.JTable tbBorrowed;
    private javax.swing.JTable tbReturn;
    private javax.swing.JTable tbUser;
    private javax.swing.JTextField txtFilterUsername;
    // End of variables declaration//GEN-END:variables
}
