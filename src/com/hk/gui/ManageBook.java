/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hk.gui;

import com.hk.authenticate.AdminsAuth;
import com.hk.objs.Books;
import com.hk.objs.Categories;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import jxl.Workbook;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/**
 *
 * @author hoangkien
 */
public class ManageBook extends javax.swing.JFrame {

    private ArrayList<Books> listBook;
    private DefaultTableModel model;

    /**
     * Creates new form ManageBook
     */
    public ManageBook() {
        initComponents();
        TableColumnModel colModel = this.tbBooks.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(70);
        colModel.getColumn(1).setPreferredWidth(160);
        model = (DefaultTableModel) this.tbBooks.getModel();
        listBook = Books.getAllBooks();
        //System.out.println(this.listBook.size());
        for (Books bookItem : listBook) {
            model.addRow(new Object[]{bookItem.getBookId(),
                bookItem.getBookName(), bookItem.getAuthor(),
                bookItem.getCategory().getCategoryName(),
                bookItem.getPublishCom(), bookItem.getShelf(),
                bookItem.getPrice(), bookItem.getPublishYear()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbBooks = new javax.swing.JTable();
        btnAddBook = new javax.swing.JButton();
        btnEditBook = new javax.swing.JButton();
        btnDeleteBook = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnClearAllFilter = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtFilterAuthor = new javax.swing.JTextField();
        txtFilterID = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFilterPublishCom = new javax.swing.JTextField();
        txtFilterName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnFilter = new javax.swing.JButton();
        txtFilterShelf = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtFilterYear = new javax.swing.JTextField();
        btnExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Book manager");

        tbBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Name", "Author", "Category", "Publish Com.", "Shelf", "Price", "Publish Year"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbBooks.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jScrollPane1.setViewportView(tbBooks);

        btnAddBook.setText("Add book");
        btnAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBookActionPerformed(evt);
            }
        });

        btnEditBook.setText("Edit book");
        btnEditBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditBookActionPerformed(evt);
            }
        });

        btnDeleteBook.setText("Delete book");
        btnDeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBookActionPerformed(evt);
            }
        });

        jLabel2.setText("Filter By Book ID");

        btnClearAllFilter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnClearAllFilter.setText("Clear Filter");
        btnClearAllFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllFilterActionPerformed(evt);
            }
        });

        jLabel5.setText("By Author");

        txtFilterAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterAuthorActionPerformed(evt);
            }
        });

        jLabel6.setText("By Publish Com.");

        jLabel3.setText("By Book name");

        jLabel7.setText("By Shelf");

        btnFilter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnFilter.setText("Filter");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        jLabel8.setText("By Publish Year");

        btnExport.setText("Export to Excel");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFilterID)
                            .addComponent(txtFilterShelf, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilterName, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilterYear, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilterAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilterPublishCom))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClearAllFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddBook, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnEditBook, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(btnDeleteBook)
                        .addGap(37, 37, 37)
                        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddBook)
                    .addComponent(btnEditBook)
                    .addComponent(btnDeleteBook)
                    .addComponent(btnExport))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFilterID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtFilterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtFilterAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtFilterPublishCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtFilterShelf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtFilterYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilter)
                    .addComponent(btnClearAllFilter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBookActionPerformed
        DialogBook dialog = new DialogBook(this, true);
        dialog.setVisibleOfBook(true);
        dialog.setVisible(true);
        if (dialog.isModify()) {
            int numberOfBook = dialog.getNumberOfBook();
            String bookName = dialog.getBookName();
            String author = dialog.getAuthor();
            Categories categoryId = dialog.getCategory();
            String publishCom = dialog.getPublishCom();
            String shelf = dialog.getShelf();
            int price = dialog.getPrice();
            int publishYear = dialog.getPublishYear();
            Books book;
            for (int i = 0; i < numberOfBook; i++) {
                book = new Books(bookName, author, publishCom,
                        categoryId, shelf, price, publishYear);
                if (book.save()) {
                    model.addRow(new Object[]{book.getBookId(), book.getBookName(),
                        book.getAuthor(), book.getCategory().getCategoryName(),
                        book.getPublishCom(), book.getShelf(),
                        book.getPrice(), book.getPublishYear()});
                } else {
                    JOptionPane.showMessageDialog(this,
                            "You do not have permission to save this book");
                }
            }
        }
    }//GEN-LAST:event_btnAddBookActionPerformed

    private void btnEditBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditBookActionPerformed
        int selectedRow = this.tbBooks.getSelectedRow();
        if (selectedRow != -1) {
            int bookId = (int) this.tbBooks.getValueAt(selectedRow, 0);
            Books book = null;
            int i;
            for (i = 0; i < this.listBook.size(); i++) {
                if (this.listBook.get(i).getBookId() == bookId) {
                    book = this.listBook.get(i);
                    break;
                }
            }
            DialogBook dialog = new DialogBook(this, true);
            dialog.setValues(bookId, book.getBookName(), book.getAuthor(), book.getCategory(),
                    book.getPublishCom(), book.getShelf(), book.getPrice(), book.getPublishYear());
            dialog.setVisible(true);
            if (dialog.isModify()) {
                String bookName = dialog.getBookName();
                String author = dialog.getAuthor();
                Categories category = dialog.getCategory();
                String publishCom = dialog.getPublishCom();
                String shelf = dialog.getShelf();
                int price = dialog.getPrice();
                int publishYear = dialog.getPublishYear();

                book.setBookName(bookName);
                book.setAuthor(author);
                book.setCategory(category);
                book.setPublishCom(publishCom);
                book.setShelf(shelf);
                book.setPrice(price);
                book.setPublishYear(publishYear);
                if (book.save()) {
                    //System.out.println("Here");
                    model.setValueAt(bookName, selectedRow, 1);
                    model.setValueAt(author, selectedRow, 2);
                    model.setValueAt(category.getCategoryName(), selectedRow, 3);
                    model.setValueAt(publishCom, selectedRow, 4);
                    model.setValueAt(shelf, selectedRow, 5);
                    model.setValueAt(price, selectedRow, 6);
                    model.setValueAt(publishYear, selectedRow, 7);
                } else {
                    JOptionPane.showMessageDialog(this,
                            "You do not have permission to edit book");
                }
            }
        } else {
            // On table not selected
            JOptionPane.showMessageDialog(this, "You must choose one row");
        }
    }//GEN-LAST:event_btnEditBookActionPerformed

    private void btnDeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBookActionPerformed
        int selectedRow = this.tbBooks.getSelectedRow();
        if (selectedRow != -1) {
            int result = JOptionPane.showConfirmDialog(this,
                    "Are you sure want to remove it");
            if (result == JOptionPane.YES_OPTION) {
                for (int i = 0; i < this.listBook.size(); i++) {
                    if (this.listBook.get(i).getBookId()
                            == (int) this.tbBooks.getValueAt(selectedRow, 0)) {
                        if (listBook.get(i).remove()) {
                            this.model.removeRow(selectedRow);
                            this.listBook.remove(i);
                        } else {
                            JOptionPane.showMessageDialog(this,
                                    "You do not have permission to Remove this category");
                        }
                        break;
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "You must choose a row");
        }
    }//GEN-LAST:event_btnDeleteBookActionPerformed

    private void btnClearAllFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllFilterActionPerformed
        this.txtFilterAuthor.setText("");
        this.txtFilterID.setText("");
        this.txtFilterName.setText("");
        this.txtFilterPublishCom.setText("");
        this.txtFilterShelf.setText("");
        this.txtFilterYear.setText("");
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        for (Books bookItem : this.listBook) {
            model.addRow(new Object[]{bookItem.getBookId(),
                bookItem.getBookName(), bookItem.getAuthor(),
                bookItem.getCategory().getCategoryName(),
                bookItem.getPublishCom(), bookItem.getShelf(),
                bookItem.getPrice(), bookItem.getPublishYear()
            });
        }
    }//GEN-LAST:event_btnClearAllFilterActionPerformed

    private void txtFilterAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterAuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterAuthorActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        String filterID = this.txtFilterID.getText();
        String filterName = this.txtFilterName.getText();
        Pattern pattern1 = Pattern.compile("(?i).*" + filterID + ".*");
        Pattern pattern2 = Pattern.compile("(?i).*" + filterName + ".*");
        Pattern pattern3 = Pattern.compile("(?i).*"
                + this.txtFilterAuthor.getText() + ".*");
        Pattern pattern4 = Pattern.compile("(?i).*"
                + this.txtFilterPublishCom.getText() + ".*");
        Pattern pattern5 = Pattern.compile("(?i).*"
                + this.txtFilterShelf.getText() + ".*");
        Pattern pattern6 = Pattern.compile("(?i).*"
                + this.txtFilterYear.getText() + ".*");
        for (Books bookItem : this.listBook) {
            if (pattern2.matcher(bookItem.getBookName()).matches()
                    && pattern1.matcher(String.valueOf(
                            bookItem.getBookId())).matches()
                    && pattern3.matcher(bookItem.getAuthor()).matches()
                    && pattern4.matcher(bookItem.getPublishCom()).matches()
                    && pattern5.matcher(bookItem.getShelf()).matches()
                    && pattern6.matcher(String.valueOf(
                            bookItem.getPublishYear())).matches()) {
                model.addRow(new Object[]{bookItem.getBookId(),
                    bookItem.getBookName(), bookItem.getAuthor(),
                    bookItem.getCategory().getCategoryName(),
                    bookItem.getPublishCom(), bookItem.getShelf(),
                    bookItem.getPrice(), bookItem.getPublishYear(),
                    "Available"
                });
            }
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel files (*.xls)", "xls");
        fc.setFileFilter(filter);
        int rt = fc.showSaveDialog(this);
        if (rt == JFileChooser.APPROVE_OPTION) {
            //System.out.println(fc.getSelectedFile().getPath());
            try {
                String filepath = fc.getSelectedFile().getPath();
                if (filepath.indexOf(".") == -1) {
                    filepath = filepath + ".xls";
                }
                WritableWorkbook workbook = Workbook.createWorkbook(
                        new File(filepath));
                WritableSheet sheet = workbook.createSheet("Result", 0);
                sheet.addCell(new Label(0, 0, "FILTER LIST"));
                rt = 0;
                if (!txtFilterID.getText().equals("")) {
                    sheet.addCell(new Label(rt, 2, "Filter by BookID"));
                    sheet.addCell(new Label(rt++, 3, txtFilterID.getText()));
                }
                if (!txtFilterName.getText().equals("")) {
                    sheet.addCell(new Label(rt, 2, "Filter by Name"));
                    sheet.addCell(new Label(rt++, 3, txtFilterName.getText()));
                }
                if (!txtFilterAuthor.getText().equals("")) {
                    sheet.addCell(new Label(rt, 2, "Filter by Author"));
                    sheet.addCell(new Label(rt++, 3, txtFilterAuthor.getText()));
                }
                if (!txtFilterPublishCom.getText().equals("")) {
                    sheet.addCell(new Label(rt, 2, "Filter by Publish com."));
                    sheet.addCell(new Label(rt++, 3, txtFilterPublishCom.getText()));
                }
                if (!txtFilterShelf.getText().equals("")) {
                    sheet.addCell(new Label(rt, 2, "Filter by Shelf"));
                    sheet.addCell(new Label(rt++, 3, txtFilterShelf.getText()));
                }
                if (!txtFilterYear.getText().equals("")) {
                    sheet.addCell(new Label(rt, 2, "Filter by Publish year"));
                    sheet.addCell(new Label(rt++, 3, txtFilterYear.getText()));
                }

                sheet.addCell(new Label(0, 5, "RESULT:"));
                TableModel model = tbBooks.getModel();
                for (int i = 0; i < model.getColumnCount(); i++) {
                    sheet.addCell(new Label(i, 7, model.getColumnName(i)));
                }
                // ID
                for (int i = 0; i < model.getRowCount(); i++) {
                    sheet.addCell(new Number(0, 8 + i, (int) tbBooks.getValueAt(i, 0)));
                }
                // Book name
                for (int i = 0; i < model.getRowCount(); i++) {
                    sheet.addCell(new Label(1, 8 + i, (String) tbBooks.getValueAt(i, 1)));
                }
                // Author
                for (int i = 0; i < model.getRowCount(); i++) {
                    sheet.addCell(new Label(2, 8 + i, (String) tbBooks.getValueAt(i, 2)));
                }
                // Category
                for (int i = 0; i < model.getRowCount(); i++) {
                    sheet.addCell(new Label(3, 8 + i, (String) tbBooks.getValueAt(i, 3)));
                }
                // Publish Com
                for (int i = 0; i < model.getRowCount(); i++) {
                    sheet.addCell(new Label(4, 8 + i, (String) tbBooks.getValueAt(i, 4)));
                }
                // Shelf
                for (int i = 0; i < model.getRowCount(); i++) {
                    sheet.addCell(new Label(5, 8 + i, (String) tbBooks.getValueAt(i, 5)));
                }
                // Price
                for (int i = 0; i < model.getRowCount(); i++) {
                    sheet.addCell(new Number(6, 8 + i, (int) tbBooks.getValueAt(i, 6)));
                }
                // Publish Year
                for (int i = 0; i < model.getRowCount(); i++) {
                    sheet.addCell(new Number(7, 8 + i, (int) tbBooks.getValueAt(i, 7)));
                }
                workbook.write();
                workbook.close();
            } catch (IOException ex) {
                Logger.getLogger(ManageBook.class.getName()).
                        log(Level.SEVERE, null, ex);
            } catch (WriteException ex) {
                Logger.getLogger(ManageBook.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnExportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBook;
    private javax.swing.JButton btnClearAllFilter;
    private javax.swing.JButton btnDeleteBook;
    private javax.swing.JButton btnEditBook;
    private javax.swing.JButton btnExport;
    private javax.swing.JButton btnFilter;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbBooks;
    private javax.swing.JTextField txtFilterAuthor;
    private javax.swing.JTextField txtFilterID;
    private javax.swing.JTextField txtFilterName;
    private javax.swing.JTextField txtFilterPublishCom;
    private javax.swing.JTextField txtFilterShelf;
    private javax.swing.JTextField txtFilterYear;
    // End of variables declaration//GEN-END:variables
}
