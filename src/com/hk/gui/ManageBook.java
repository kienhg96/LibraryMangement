/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hk.gui;

import com.hk.authenticate.AdminsAuth;
import com.hk.objs.Books;
import com.hk.objs.Categories;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author hoangkien
 */
public class ManageBook extends javax.swing.JFrame {

    private ArrayList<Books> listBook;
    private DefaultTableModel model;

    /**
     * Creates new form ManageBook
     */
    public ManageBook() {
        AdminsAuth.login("admin", "admin");
        initComponents();
        TableColumnModel colModel = this.tbBooks.getColumnModel();
        colModel.getColumn(0).setPreferredWidth(70);
        colModel.getColumn(1).setPreferredWidth(160);
        model = (DefaultTableModel) this.tbBooks.getModel();
        listBook = Books.getAllBooks();
        //System.out.println(this.listBook.size());
        for (Books bookItem : listBook) {
            model.addRow(new Object[]{bookItem.getBookId(),
                bookItem.getBookName(), bookItem.getAuthor(), 
                bookItem.getCategory().getCategoryName(),
                bookItem.getPublishCom(), bookItem.getShelf(),
                bookItem.getPrice(), bookItem.getPublishYear()});
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbBooks = new javax.swing.JTable();
        btnAddBook = new javax.swing.JButton();
        btnEditBook = new javax.swing.JButton();
        btnDeleteBook = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tbBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Name", "Author", "Category", "Publish Com.", "Shelf", "Price", "Publish Year"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbBooks.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jScrollPane1.setViewportView(tbBooks);

        btnAddBook.setText("Add book");
        btnAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBookActionPerformed(evt);
            }
        });

        btnEditBook.setText("Edit book");
        btnEditBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditBookActionPerformed(evt);
            }
        });

        btnDeleteBook.setText("Delete book");
        btnDeleteBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteBookActionPerformed(evt);
            }
        });

        jLabel1.setText("Filter by Book name");

        btnFilter.setText("Filter");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 784, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddBook, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnEditBook, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteBook)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddBook)
                    .addComponent(btnEditBook)
                    .addComponent(btnDeleteBook))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBookActionPerformed
        //AdminsAuth.login("admin", "admin"); // Remove after complete
        DialogBook dialog = new DialogBook(this, true);
        dialog.setVisibleOfBook(true);
        dialog.setVisible(true);
        if (dialog.isModify()) {
            int numberOfBook = dialog.getNumberOfBook();
            String bookName = dialog.getBookName();
            String author = dialog.getAuthor();
            Categories categoryId = dialog.getCategory();
            String publishCom = dialog.getPublishCom();
            String shelf = dialog.getShelf();
            int price = dialog.getPrice();
            int publishYear = dialog.getPublishYear();
//            System.out.println(bookName + " " + author + " "
//                    + categoryId + " " + publishCom + " " + shelf + " "
//                    + price + " " + publishYear);
            Books book;
            for (int i = 0; i < numberOfBook; i++) {
                book = new Books(bookName, author, publishCom,
                        categoryId, shelf, price, publishYear);
                if (book.save()) {
                    model.addRow(new Object[]{book.getBookId(), book.getBookName(),
                        book.getAuthor(), book.getCategory().getCategoryName(),
                        book.getPublishCom(), book.getShelf(),
                        book.getPrice(), book.getPublishYear()});
                } else {
                    JOptionPane.showMessageDialog(this, "You do not have permission to save this book");
                }
            }
        }
    }//GEN-LAST:event_btnAddBookActionPerformed

    private void btnEditBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditBookActionPerformed
        //AdminsAuth.login("admin", "admin"); // Remove after complete

        int selectedRow = this.tbBooks.getSelectedRow();
        if (selectedRow != -1) {
            int bookId = (int) this.tbBooks.getValueAt(selectedRow, 0);
            Books book = null;
            int i;
            for (i = 0; i < this.listBook.size(); i++) {
                if (this.listBook.get(i).getBookId() == bookId) {
                    book = this.listBook.get(i);
                    break;
                }
            }
            DialogBook dialog = new DialogBook(this, true);
            dialog.setValues(bookId, book.getBookName(), book.getAuthor(), book.getCategory(),
                    book.getPublishCom(), book.getShelf(), book.getPrice(), book.getPublishYear());
            dialog.setVisible(true);
            if (dialog.isModify()) {
                String bookName = dialog.getBookName();
                String author = dialog.getAuthor();
                Categories category = dialog.getCategory();
                String publishCom = dialog.getPublishCom();
                String shelf = dialog.getShelf();
                int price = dialog.getPrice();
                int publishYear = dialog.getPublishYear();
                
                book.setBookName(bookName);
                book.setAuthor(author);
                book.setCategory(category);
                book.setPublishCom(publishCom);
                book.setShelf(shelf);
                book.setPrice(price);
                book.setPublishYear(publishYear);
                if (book.save()) {
                    //System.out.println("Here");
                    model.setValueAt(bookName, selectedRow, 1);
                    model.setValueAt(author, selectedRow, 2);
                    model.setValueAt(category.getCategoryName(), selectedRow, 3);
                    model.setValueAt(publishCom, selectedRow, 4);
                    model.setValueAt(shelf, selectedRow, 5);
                    model.setValueAt(price, selectedRow, 6);
                    model.setValueAt(publishYear, selectedRow, 7);
                } else {
                    JOptionPane.showMessageDialog(this, "You do not have permission to edit book");
                }
            }
        } else {
            // On table not selected
            JOptionPane.showMessageDialog(this, "You must choose one row");
        }
    }//GEN-LAST:event_btnEditBookActionPerformed

    private void btnDeleteBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteBookActionPerformed
        //AdminsAuth.login("admin", "admin"); // Remove after complete
        int selectedRow = this.tbBooks.getSelectedRow();
        if (selectedRow != -1) {
            int result = JOptionPane.showConfirmDialog(this, "Are you sure want to remove it");
            if (result == JOptionPane.YES_OPTION) {
                for (int i = 0; i < this.listBook.size(); i++) {
                    if (this.listBook.get(i).getBookId() == (int) this.tbBooks.getValueAt(selectedRow, 0)) {
                        if (listBook.get(i).remove()) {
                            this.model.removeRow(selectedRow);
                            this.listBook.remove(i);
                        } else {
                            JOptionPane.showMessageDialog(this, "You do not have permission to Remove this category");
                        }
                        break;
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "You must choose a row");
        }
    }//GEN-LAST:event_btnDeleteBookActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        String str = this.txtFilter.getText();
        Pattern pattern = Pattern.compile("(?i).*" + str + ".*");
        for (Books bookItem : this.listBook) {
            if (pattern.matcher(bookItem.getBookName()).matches()) {
                model.addRow(new Object[]{bookItem.getBookId(),
                    bookItem.getBookName(), bookItem.getAuthor(), 
                    bookItem.getCategory().getCategoryName(),
                    bookItem.getPublishCom(), bookItem.getShelf(),
                    bookItem.getPrice(), bookItem.getPublishYear()});

            }
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBook;
    private javax.swing.JButton btnDeleteBook;
    private javax.swing.JButton btnEditBook;
    private javax.swing.JButton btnFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbBooks;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables
}
