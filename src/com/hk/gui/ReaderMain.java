/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hk.gui;

import com.hk.authenticate.UsersAuth;
import com.hk.database.Database;
import com.hk.objs.Books;
import com.hk.objs.BorrowDetails;
import com.hk.objs.Borrows;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.regex.Pattern;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hoangkien
 */
public class ReaderMain extends javax.swing.JFrame {

    private ArrayList<Books> availableBooks;
    private ArrayList<Books> notAvailableBooks;
    private DefaultTableModel bookModel;
    private DefaultTableModel borrowModel;
    private DateFormat df = new SimpleDateFormat("dd-MM-yyyy");

    /**
     * Creates new form ReaderMain
     */
    public ReaderMain() {
        Database.initialize();
        initComponents();
        availableBooks = Database.getAllBookAvailable();
        notAvailableBooks = Database.getAllBookNotAvailable();
        bookModel = (DefaultTableModel) tbBooks.getModel();
        borrowModel = (DefaultTableModel) tbBorrowed.getModel();
        ArrayList<Borrows> listBorrow
                = Borrows.getAllBorrowListByUser(UsersAuth.getUser());
        this.txtWelcome.setText("Hello, " + UsersAuth.getUser().getFullname()
                + ". Your deposit is " + UsersAuth.getUser().getDeposit());
        this.setTitle("Hello, " + UsersAuth.getUser().getFullname());
        for (Books book : availableBooks) {
            bookModel.addRow(new Object[]{
                book.getBookId(), book.getBookName(), book.getAuthor(),
                book.getCategory().getCategoryName(), book.getPublishCom(),
                book.getShelf(), book.getPrice(), book.getPublishYear(),
                "Available"
            });
        }
        for (Books book : notAvailableBooks) {
            bookModel.addRow(new Object[]{
                book.getBookId(), book.getBookName(), book.getAuthor(),
                book.getCategory().getCategoryName(), book.getPublishCom(),
                book.getShelf(), book.getPrice(), book.getPublishYear(),
                "Not available"
            });
        }
        for (Borrows borrow : listBorrow) {
            for (BorrowDetails detail : borrow.getBorrowDetailList()) {
                if (detail.getReturnDate() == null) {
                    Books book = detail.getBook();
                    borrowModel.addRow(new Object[]{
                        book.getBookId(),
                        book.getBookName(),
                        book.getAuthor(),
                        df.format(borrow.getBorrowDate()),
                        df.format(detail.getExpirationDate())
                    });
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtWelcome = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbBooks = new javax.swing.JTable();
        txtFilterID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtFilterName = new javax.swing.JTextField();
        btnFilter = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbBorrowed = new javax.swing.JTable();
        btnExit = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtFilterAuthor = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtFilterPublishCom = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtFilterShelf = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtFilterYear = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        cbFilterAvailable = new javax.swing.JComboBox();
        btnClearAllFilter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtWelcome.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        txtWelcome.setText("Hello, ...");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Search Book:");

        jLabel2.setText("Filter By Book ID");

        tbBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Name", "Author", "Category", "Publish Com.", "Shelf", "Price", "Publish Year", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbBooks.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jScrollPane1.setViewportView(tbBooks);

        jLabel3.setText("By Book name");

        btnFilter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnFilter.setText("Filter");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Books you have borrowed:");

        tbBorrowed.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Name", "Author", "Borrow Date", "Expiration Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbBorrowed.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
        jScrollPane2.setViewportView(tbBorrowed);

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        jLabel5.setText("By Author");

        txtFilterAuthor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterAuthorActionPerformed(evt);
            }
        });

        jLabel6.setText("By Publish Com.");

        jLabel7.setText("By Shelf");

        jLabel8.setText("By Publish Year");

        jLabel9.setText("By status");

        cbFilterAvailable.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Available", "Not available" }));
        cbFilterAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFilterAvailableActionPerformed(evt);
            }
        });

        btnClearAllFilter.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnClearAllFilter.setText("Clear Filter");
        btnClearAllFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearAllFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 828, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFilterID, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                            .addComponent(txtFilterShelf))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilterName, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilterYear, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtFilterAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                            .addComponent(cbFilterAvailable, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilterPublishCom))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnClearAllFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnLogout)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExit)
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtWelcome)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnExit, btnLogout});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtFilterAuthor, txtFilterID});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtWelcome)
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFilterID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtFilterName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtFilterAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtFilterPublishCom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtFilterShelf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtFilterYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(cbFilterAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilter)
                    .addComponent(btnClearAllFilter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExit)
                    .addComponent(btnLogout))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnExitActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        UsersAuth.logout();
        new Login().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        bookModel.getDataVector().removeAllElements();
        bookModel.fireTableDataChanged();
        String filterID = this.txtFilterID.getText();
        String filterName = this.txtFilterName.getText();
        Pattern pattern1 = Pattern.compile("(?i).*" + filterID + ".*");
        Pattern pattern2 = Pattern.compile("(?i).*" + filterName + ".*");
        Pattern pattern3 = Pattern.compile("(?i).*"
                + this.txtFilterAuthor.getText() + ".*");
        Pattern pattern4 = Pattern.compile("(?i).*"
                + this.txtFilterPublishCom.getText() + ".*");
        Pattern pattern5 = Pattern.compile("(?i).*"
                + this.txtFilterShelf.getText() + ".*");
        Pattern pattern6 = Pattern.compile("(?i).*"
                + this.txtFilterYear.getText() + ".*");
        int status = this.cbFilterAvailable.getSelectedIndex();
        if (status == 0 || status == 1) {
            for (Books bookItem : this.availableBooks) {
                if (pattern2.matcher(bookItem.getBookName()).matches()
                        && pattern1.matcher(String.valueOf(
                                        bookItem.getBookId())).matches()
                        && pattern3.matcher(bookItem.getAuthor()).matches()
                        && pattern4.matcher(bookItem.getPublishCom()).matches()
                        && pattern5.matcher(bookItem.getShelf()).matches()
                        && pattern6.matcher(String.valueOf(
                                        bookItem.getPublishYear())).matches()) {
                    bookModel.addRow(new Object[]{bookItem.getBookId(),
                        bookItem.getBookName(), bookItem.getAuthor(),
                        bookItem.getCategory().getCategoryName(),
                        bookItem.getPublishCom(), bookItem.getShelf(),
                        bookItem.getPrice(), bookItem.getPublishYear(),
                        "Available"
                    });
                }
            }
        }
        if (status == 0 || status == 2) {
            for (Books bookItem : this.notAvailableBooks) {
                if (pattern2.matcher(bookItem.getBookName()).matches()
                        && pattern1.matcher(String.valueOf(
                                        bookItem.getBookId())).matches()
                        && pattern3.matcher(bookItem.getAuthor()).matches()
                        && pattern4.matcher(bookItem.getPublishCom()).matches()
                        && pattern5.matcher(bookItem.getShelf()).matches()
                        && pattern6.matcher(String.valueOf(
                                        bookItem.getPublishYear())).matches()) {
                    bookModel.addRow(new Object[]{bookItem.getBookId(),
                        bookItem.getBookName(), bookItem.getAuthor(),
                        bookItem.getCategory().getCategoryName(),
                        bookItem.getPublishCom(), bookItem.getShelf(),
                        bookItem.getPrice(), bookItem.getPublishYear(),
                        "Not available"
                    });
                }
            }
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void txtFilterAuthorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterAuthorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterAuthorActionPerformed

    private void cbFilterAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFilterAvailableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbFilterAvailableActionPerformed

    private void btnClearAllFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearAllFilterActionPerformed
        this.txtFilterAuthor.setText("");
        this.txtFilterID.setText("");
        this.txtFilterName.setText("");
        this.txtFilterPublishCom.setText("");
        this.txtFilterShelf.setText("");
        this.txtFilterYear.setText("");
        this.cbFilterAvailable.setSelectedIndex(0);
        bookModel.getDataVector().removeAllElements();
        bookModel.fireTableDataChanged();
        for (Books bookItem : this.availableBooks) {
            bookModel.addRow(new Object[]{bookItem.getBookId(),
                bookItem.getBookName(), bookItem.getAuthor(),
                bookItem.getCategory().getCategoryName(),
                bookItem.getPublishCom(), bookItem.getShelf(),
                bookItem.getPrice(), bookItem.getPublishYear(),
                "Available"
            });
        }
        for (Books bookItem : this.notAvailableBooks) {
            bookModel.addRow(new Object[]{bookItem.getBookId(),
                bookItem.getBookName(), bookItem.getAuthor(),
                bookItem.getCategory().getCategoryName(),
                bookItem.getPublishCom(), bookItem.getShelf(),
                bookItem.getPrice(), bookItem.getPublishYear(),
                "Not available"
            });
        }
    }//GEN-LAST:event_btnClearAllFilterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReaderMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReaderMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReaderMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReaderMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReaderMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearAllFilter;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnLogout;
    private javax.swing.JComboBox cbFilterAvailable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbBooks;
    private javax.swing.JTable tbBorrowed;
    private javax.swing.JTextField txtFilterAuthor;
    private javax.swing.JTextField txtFilterID;
    private javax.swing.JTextField txtFilterName;
    private javax.swing.JTextField txtFilterPublishCom;
    private javax.swing.JTextField txtFilterShelf;
    private javax.swing.JTextField txtFilterYear;
    private javax.swing.JLabel txtWelcome;
    // End of variables declaration//GEN-END:variables
}
